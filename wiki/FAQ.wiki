#summary Frequently Asked Questions
#labels Featured

===Table of Contents===
<wiki:toc />

===What's with the name?===
Distal is an acronym for Dynamic Interface Simplified with Template Attribute Language. Distal also represents the "distance" between the data and the user interface as being a valley that is difficult to cross. Distal also happens to be phonetically similar to "distill" which patrons the notion of distilling data into the HTML tree.

The logo is a database with whipped cream on top. A notion that Distal puts the user interface (whipped cream) right next to the data (database), and squeezing out the middle-man. This is not to be taken literally. Always follow the proper design patterns of abstraction.

http://code.google.com/p/distal/logo?endswith=.png

===Where do I define the HTML snippets that go into the webpage?===
Distal works differently than traditional string based templates. Traditionally you put HTML inside a string or a hidden script tag and add marking symbols and have the engine parse and replace those symbols dynamically before inserting that into your document. Distal works with your existing HTML document. You design your webpage as if it is already filled with data. Then you go back through your webpage and mark which nodes should have its data replaced dynamically. Distal works to modify your web page dynamically.

===Should I use the development version or the compressed version?===
The compressed version should be used in production as it makes the same functionality available with a smaller overhead which is beneficial to the customer and the server. If you are interested in customizing the tool or folding the tool into your development toolchain, you can download the development version which retains all inline comments and formatting.

===How do I clear our rows from a table that were not generated dynamically (pre-rendered)?===
Add a `data-qdup` attribute to the rows to be cleared out. Note that the nodes must be next to the `qrepeat` node without breaks in between.
<code language=xml>
<table> 
  <tr><th>Menu</th></tr> 
  <tr data-qrepeat="m foods"><td data-qtext="m.name">Fries</td></tr> 
  <tr data-qdup=1><td>Burger</td></tr> 
  <tr data-qdup=1><td>Coke</td></tr> 
</table></code>
This is useful if you want the list to be pre-rendered by the server, and need Distal to clear out the list before filling it with new data.

===Does it work with jQuery?===
If you want to take advantage of jQuery chains, you can include this line after you pull in Distal:
<code language="javascript">
<script src="jquery.js"></script> 
<script src="distal.js"></script> 
<script> 
jQuery.fn.distal = function (json) { 
    return this.each( function () { distal(this, json) } ) 
}; 
</script></code>
Afterwards you can call Distal like this `$("body").distal( {welcome_msg: "hello world"} );`.

===Does it work with RequireJS?===
Yes, you can use [http://requirejs.org RequireJS] like so:
<code language="javascript">
require(["distal"], function(distal) { 
    distal(node, json); 
});</code>

===Will my page validate against the W3C validator?===
Yes, provided that you use the latest HTML doctype `<!DOCTYPE html>`. This doctype allows the use of arbitrary "data-" attributes in your HTML. Another advantage is that because your HTML validates, your Template code will also validate too.

===Do you support progressive enhancement?===
Yes, because your HTML also doubles as your template. When your page first loads, it will have all the data and HTML in place for older browsers to view. If the browser supports Javascript, when you call Distal it will modify the current page to insert new data inside it. Other template frameworks do not have this feature as their templates are defined in strings or in hidden script tags which are not visible to the user if Javascript is not supported.

Another advantage is that since your HTML is also your template code, you do not have to duplicate your template code in 2 places to achieve progressive enhancement.

===Do you support search engine optimization?===
Yes, because your HTML also doubles as your template. Since a page that uses Distal looks the same with Javascript and without Javascript, search engines are able to see all the contents in your page without executing Javascript and are able to fully index your page.

===Do you work well with external widgets?===
Yes, because Distal does not replace existing nodes in the webpage. This plays well with widgets, which rely on creating additional nodes dynamically for the widget to function. Many template systems work by replacing a large chunk of the webpage each time which may break an already initialized widget.  

===Do you support rapid prototyping?===
One hallmark of rapid prototyping is to forgo efficiency in exchange for quick development. With distal you can quickly call the API with minimal coding by passing in the root node as the parameter. Once your prototype is done, you can go back and improve efficiency by selecting more specific nodes (nodes with less branches) to call distal.

===Can I customize the attribute names?===
If the attribute names are incompatible with your existing website, you can change them to your own custom name:
<code language="javascript">
<script src="distal.js"></script> 
<script> 
distal.qdef = "xdef"; 
distal.qattr = "xattr"; 
distal.qtext = "xtext"; 
//... etc.
</script>

<div xattr="rss.feeds.title"></div>
</code>

===Why do some images get duplicated for a few seconds?===
If you are dynamically changing the source of an image using `qattr` and that image is inside a repeated node, when you call Distal, the repeated node will be cloned X number of times and a new image source will be assigned to the image. However, in some browsers assigning a new image source will temporarily keep the old image in place until the new image source has downloaded. This is a browser specific behavior. It is analogous to changing images on mouse over, but the new image was not preloaded, so the old image stays visible, until the new image is available.